# Example environment variables for AI Resume Builder
# Do NOT commit sensitive values. Copy this file to `.env` locally and populate secrets.

# Django settings
SECRET_KEY=replace-with-your-secret-key
DEBUG=False
ALLOWED_HOSTS=your-app.onrender.com,127.0.0.1,localhost

# Database (Postgres) - if using Render Postgres or DATABASE_URL provider
# Example: postgres://user:pass@host:port/dbname
DATABASE_URL=postgresql://user:password@host:5432/dbname

# OpenAI (optional)
OPENAI_API_KEY=your-openai-api-key

# Email - used for OTP/password reset and signup verification
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@example.com
EMAIL_HOST_PASSWORD=your-email-password-or-app-password
DEFAULT_FROM_EMAIL="AI Resume Builder <no-reply@example.com>"
SERVER_EMAIL="AI Resume Builder <no-reply@example.com>"

# Cloudinary (optional) - for media storage
CLOUDINARY_CLOUD_NAME=your-cloud-name
CLOUDINARY_API_KEY=your-cloudinary-api-key
CLOUDINARY_API_SECRET=your-cloudinary-api-secret

# Optional: Sentry DSN, any external service keys
SENTRY_DSN=

# Notes:
# 1) On Render, add these as Environment Variables in the Service "Environment" settings
#    (do NOT upload a .env containing secrets to the repository).
# 2) If you have already exposed keys (in this repo), rotate them immediately.
# 3) For local development you can create a local `.env` file from this example and
#    keep it out of version control. The `.gitignore` already ignores `.env` files.
# Django Settings
SECRET_KEY=your-secret-key-here
DEBUG=True
ALLOWED_HOSTS=127.0.0.1,localhost

# Database Settings (SQLite for dev, PostgreSQL for prod)
DB_ENGINE=django.db.backends.sqlite3
DB_NAME=db.sqlite3

# Optional: PostgreSQL Settings
# DB_ENGINE=django.db.backends.postgresql
# DB_NAME=resume_builder
# DB_USER=postgres
# DB_PASSWORD=your-password
# DB_HOST=localhost
# DB_PORT=5432

# OpenAI API Key (optional)
OPENAI_API_KEY=your-openai-api-key-here

# ===== EMAIL / SMTP CONFIGURATION =====
# Development: Uses console backend (emails printed to console)
# Production: Set DEBUG=False and configure SMTP below

# Gmail Configuration (Example)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password  # Not your regular password! Use App Password

# Alternative: SendGrid
# EMAIL_HOST=smtp.sendgrid.net
# EMAIL_PORT=587
# EMAIL_HOST_USER=apikey
# EMAIL_HOST_PASSWORD=SG.your-sendgrid-api-key-here

# Alternative: AWS SES
# EMAIL_HOST=email-smtp.us-east-1.amazonaws.com  # Change region as needed
# EMAIL_PORT=587
# EMAIL_HOST_USER=your-aws-smtp-username
# EMAIL_HOST_PASSWORD=your-aws-smtp-password

# From Email Address (used in password resets and notifications)
DEFAULT_FROM_EMAIL=noreply@airesume.com
SERVER_EMAIL=server@airesume.com

# ===== GMAIL SPECIFIC SETUP =====
# 1. Enable 2-Factor Authentication in your Google Account
# 2. Generate App Password: https://myaccount.google.com/apppasswords
# 3. Copy the 16-character password
# 4. Paste it in EMAIL_HOST_PASSWORD above
# 5. Use your full Gmail address in EMAIL_HOST_USER

# ===== SENDGRID SETUP =====
# 1. Create SendGrid account (free tier available)
# 2. Get API Key from SendGrid dashboard
# 3. Use "apikey" as EMAIL_HOST_USER
# 4. Use your API key as EMAIL_HOST_PASSWORD

# ===== AWS SES SETUP =====
# 1. Verify email domain in AWS SES
# 2. Create SMTP credentials in SES
# 3. Update EMAIL_HOST with your region
# 4. Add SMTP username and password
