"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
from django.core.exceptions import ImproperlyConfigured

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
# Default to False unless DEBUG env is explicitly 'True'
DEBUG = os.getenv('DEBUG', 'False') == 'True'

# SECURITY WARNING: keep the secret key used in production secret!
# Read SECRET_KEY from env. In production (DEBUG=False) require it; in DEBUG generate one for convenience.
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    if DEBUG:
        # Local development fallback: generate a random key to avoid crashes
        from django.core.management.utils import get_random_secret_key
        SECRET_KEY = get_random_secret_key()
        print("⚠️ Using generated SECRET_KEY for development only")
    else:
        # In production we must have a SECRET_KEY set via environment
        raise ImproperlyConfigured("SECRET_KEY environment variable is required in production")

# Explicit ALLOWED_HOSTS for Render and local dev
# If Render provides an ALLOWED_HOSTS env var, respect it (comma-separated)
env_allowed = os.getenv('ALLOWED_HOSTS')
if env_allowed:
    ALLOWED_HOSTS = [h.strip() for h in env_allowed.split(',') if h.strip()]
else:
    ALLOWED_HOSTS = [
        os.getenv('RENDER_EXTERNAL_HOSTNAME', 'ai-resume-builder-6jan.onrender.com'),
        '127.0.0.1',
        'localhost',
    ]

# CSRF trusted origins: include Render domain and wildcard for onrender.com
CSRF_TRUSTED_ORIGINS = [
    'https://ai-resume-builder-6jan.onrender.com',
    'https://*.onrender.com',
    # Keep local dev entries for development convenience
    'http://127.0.0.1:8000',
    'http://localhost:8000',
]

# Allow adding the RENDER_EXTERNAL_HOSTNAME dynamically if provided
RENDER_EXTERNAL_HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME and RENDER_EXTERNAL_HOSTNAME not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
    if f'https://{RENDER_EXTERNAL_HOSTNAME}' not in CSRF_TRUSTED_ORIGINS:
        CSRF_TRUSTED_ORIGINS.append(f'https://{RENDER_EXTERNAL_HOSTNAME}')

# Custom CSRF failure view
CSRF_FAILURE_VIEW = 'users.csrf_views.csrf_failure'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Third-party apps
    'cloudinary_storage',
    'cloudinary',
    'crispy_forms',
    'crispy_bootstrap5',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    
    # Local apps
    'users.apps.UsersConfig',
    'resume.apps.ResumeConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration: prefer explicit PostgreSQL env vars, then DATABASE_URL, fall back to sqlite
if os.getenv('POSTGRES_DB') or os.getenv('DB_NAME'):
    # Support explicit Postgres environment variables for local/dev setups
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRES_DB', os.getenv('DB_NAME')),
            'USER': os.getenv('POSTGRES_USER', os.getenv('DB_USER', 'postgres')),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD', os.getenv('DB_PASSWORD', '')),
            'HOST': os.getenv('POSTGRES_HOST', os.getenv('DB_HOST', 'localhost')),
            'PORT': os.getenv('POSTGRES_PORT', os.getenv('DB_PORT', '5432')),
        }
    }
elif 'DATABASE_URL' in os.environ:
    # Allow DATABASE_URL (e.g., Render) to override
    # Use dj_database_url to parse and enable ssl for Render
    db_url = os.environ.get('DATABASE_URL', '') or ''
    db_url = db_url.strip()
    if db_url:
        try:
            DATABASES = {
                'default': dj_database_url.config(
                    default=db_url,
                    conn_max_age=600,
                    conn_health_checks=True,
                    ssl_require=True,  # Enforce SSL for Render Postgres
                )
            }
        except Exception as e:
            # If the DATABASE_URL is malformed, log a clear message and fall back to sqlite for safety
            print('ERROR: Invalid DATABASE_URL provided; falling back to sqlite. Fix DATABASE_URL in environment. Error:', str(e))
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }
    else:
        # Empty string present as DATABASE_URL; fallback to sqlite and inform operator
        print('WARNING: DATABASE_URL environment variable is set but empty - using sqlite fallback')
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Custom user model
AUTH_USER_MODEL = 'users.CustomUser'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    # Custom backend for email/username authentication
    'users.auth_backends.EmailOrUsernameBackend',
    # Fallback to Django's default
    'django.contrib.auth.backends.ModelBackend',
    # Allauth backend
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Cloudinary Configuration for persistent media storage
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME', 'dud3f00ay'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY', '764652939378289'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET', 'gu7Rwmz8jB4I0vsI3VYZNC3Ri0Q'),
}

# Use Cloudinary for media storage if credentials are provided
if CLOUDINARY_STORAGE['CLOUD_NAME'] and CLOUDINARY_STORAGE['API_KEY']:
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
    print("✅ Cloudinary configured: Media files will be stored in the cloud")
else:
    print("⚠️  Cloudinary not configured: Using local media storage")

# WhiteNoise media file serving for production
# Note: For production, consider using cloud storage like AWS S3, Cloudinary, etc.
# Free tier Render has ephemeral storage - files are deleted on restart
if not DEBUG:
    # In production, use WhiteNoise to serve media files temporarily
    # WARNING: This is not ideal for production as files will be lost on dyno restart
    WHITENOISE_AUTOREFRESH = True
    WHITENOISE_USE_FINDERS = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'

# Django Allauth Settings
SITE_ID = 1
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False  # Don't require username (using email for authentication)
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Login via email
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_FORMS = {
    'signup': 'users.forms.CustomSignupForm',
}
ACCOUNT_ADAPTER = 'users.adapters.CustomAccountAdapter'  # Use custom adapter for OTP password reset

# Password reset settings
PASSWORD_RESET_TIMEOUT = 3600  # 1 hour


# Login/Logout URLs
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'home'
LOGIN_URL = 'account_login'

# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Store sessions in database
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
SESSION_SAVE_EVERY_REQUEST = False  # Only save if session is modified
SESSION_COOKIE_NAME = 'sessionid'
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookie
SESSION_COOKIE_SAMESITE = 'Lax'  # Allow cookies on same-site requests
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Keep session after browser closes

# CSRF Cookie Configuration
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_HTTPONLY = False  # JavaScript needs access for AJAX requests
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_USE_SESSIONS = False  # Store CSRF token in cookie, not session
CSRF_COOKIE_AGE = 31449600  # 1 year

# Email settings
# Use environment variables with Render-friendly defaults (Gmail SMTP)
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'mpandat0052@gmail.com')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'ehaw vyzx zrgc ngws')
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'AI Resume Builder <mpandat0052@gmail.com>')
SERVER_EMAIL = os.getenv('SERVER_EMAIL', 'AI Resume Builder <mpandat0052@gmail.com>')

if EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
    # Log email configuration state
    if EMAIL_HOST_USER and EMAIL_HOST_PASSWORD:
        print("✅ Email configured: Real emails will be sent via SMTP")
    else:
        print("⚠️ Email backend is SMTP but EMAIL_HOST_USER or PASSWORD are empty")

# OpenAI API Key (set in environment variables)
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')

# Theme settings removed: site fixed to light theme and theme toggle removed

# Security settings (only in production)
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True  # Only send session cookie over HTTPS
    CSRF_COOKIE_SECURE = True  # Only send CSRF cookie over HTTPS
    SESSION_COOKIE_DOMAIN = None  # Let Django auto-detect domain
    CSRF_COOKIE_DOMAIN = None  # Let Django auto-detect domain
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # Note: ALLOWED_HOSTS is already configured above with RENDER_EXTERNAL_HOSTNAME
else:
    # Development settings - allow cookies over HTTP
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# Logging: ensure errors are visible in platform logs (console)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        # Enable verbose logging for the mail backend to help diagnose SMTP issues
        'django.core.mail': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',  # Log all request errors
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'WARNING',  # Log database errors
            'propagate': False,
        },
        'users': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'resume': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}
